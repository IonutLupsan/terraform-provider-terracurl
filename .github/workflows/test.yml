name: Tests

# This GitHub action runs your tests for each pull request and push.
# Optionally, you can turn it on using a schedule for regular testing.
on:
  pull_request:
    paths-ignore:
      - 'README.md'
  push:
    paths-ignore:
      - 'README.md'

<<<<<<< HEAD
# Testing only needs permissions to read the repository contents.
permissions:
  contents: read

jobs:
  # Ensure project builds before running testing matrix
  build:
    name: Build
    container:
      image: golang:latest
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version-file: 'go.mod'
          cache: false
      - name: Fix Git Safe Directory Issue
        run: |
          git config --global --add safe.directory /__w/terraform-provider-terracurl/terraform-provider-terracurl
      - name: Clean Go Module Cache
        run: |
          go clean -modcache
      - run: go mod download
      - run: go build -v .
      - name: Run linters
        uses: golangci/golangci-lint-action@3cfe3a4abbb849e10058ce4af15d205b6da42804 # v4.0.0
        with:
          version: latest
          args: --out-format=colored-line-number --timeout=5m --disable exportloopref,tenv,vet --config=/dev/null
=======
jobs:
  build:
    name: Build Provider
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Get dependencies
        run: go mod download

      - name: Build Provider
        run: GOOS=linux GOARCH=amd64 go build -o terraform-provider-terracurl .

      - name: Upload provider binary
        uses: actions/upload-artifact@v4
        with:
          name: terraform-provider-terracurl
          path: terraform-provider-terracurl
          compression-level: 0
>>>>>>> main

  generate:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version-file: 'go.mod'
<<<<<<< HEAD
          cache: false
      # Temporarily download Terraform 1.8 prerelease for function documentation support.
      # When Terraform 1.8.0 final is released, this can be removed.
      - uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36 # v3.0.0
        with:
          terraform_version: '1.10.5'
          terraform_wrapper: false
      - run: go generate ./...
      - name: git diff
=======
          cache: true
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.10.5'
          terraform_wrapper: false

      - name: Download built provider
        uses: actions/download-artifact@v4
        with:
          name: terraform-provider-terracurl
          path: .

      - name: Make provider executable
        run: chmod +x terraform-provider-terracurl

      - name: Move Provider to Terraform Plugin Directories
        run: |
          mkdir -p ~/.terraform.d/plugins/local/local/terracurl/1.0.0/linux_amd64
          cp terraform-provider-terracurl ~/.terraform.d/plugins/local/local/terracurl/1.0.0/linux_amd64/

      - name: Verify Terraform Plugin Directories
        run: ls -la ~/.terraform.d/plugins/local/local/terracurl/1.0.0/linux_amd64/

      - name: Create Terraform configuration file
        run: |
          cat <<EOF > main.tf
          terraform {
            required_providers {
              terracurl = {
                source  = "local/local/terracurl"
                version = "1.0.0"
              }
            }
          }
          provider "terracurl" {}
          EOF

      - name: Debug Provider with Terraform
        run: |
          export TF_LOG=TRACE
          terraform init -upgrade
          terraform providers || echo "Error: Terraform could not attach to provider"

      - name: Run Provider Schema Export Manually
        run: |
          export TF_LOG=DEBUG
          terraform providers schema -json > schema.json || (echo "Error generating schema!"; cat schema.json; exit 1)

      - name: Debug Schema Output
        run: cat schema.json || echo "Schema output is empty"

      - name: Run `go generate`
        run: |
          export TF_LOG=DEBUG
          go generate ./...

      - name: Check for Unexpected Changes
>>>>>>> main
        run: |
          git diff --compact-summary --exit-code || \
            (echo; echo "Unexpected difference in directories after code generation. Run 'go generate ./...' command and commit."; exit 1)

<<<<<<< HEAD
  # Run acceptance tests in a matrix with Terraform CLI versions
=======
>>>>>>> main
  test:
    name: Terraform Provider Acceptance Tests
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        terraform:
          - '1.3.*'
          - '1.4.*'
          - '1.5.*'
          - '1.6.*'
          - '1.7.*'
          - '1.8.*'
          - '1.9.*'
          - '1.10.*'
          - '1.11.*'
    steps:
<<<<<<< HEAD
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version-file: 'go.mod'
          cache: false
      - uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36 # v3.0.0
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false
      - run: go mod download
      - env:
          TF_ACC: "1"
        run: go test -v -cover ./internal/provider/
        timeout-minutes: 10
=======
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          cache: true

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

      - name: Download built provider
        uses: actions/download-artifact@v4
        with:
          name: terraform-provider-terracurl
          path: .

      - name: Make provider executable
        run: chmod +x terraform-provider-terracurl

      - name: Move Provider to Terraform Plugin Directories
        run: |
          mkdir -p ~/.terraform.d/plugins/local/local/terracurl/1.0.0/linux_amd64
          mkdir -p .terraform/plugins/registry.local/local/terracurl/1.0.0/linux_amd64
          cp terraform-provider-terracurl ~/.terraform.d/plugins/local/local/terracurl/1.0.0/linux_amd64/
          cp terraform-provider-terracurl .terraform/plugins/registry.local/local/terracurl/1.0.0/linux_amd64/

      - name: Verify Terraform Plugin Directories
        run: |
          echo "Checking ~/.terraform.d/plugins/"
          ls -la ~/.terraform.d/plugins/local/local/terracurl/1.0.0/linux_amd64/
          echo "Checking .terraform/plugins/"
          ls -la .terraform/plugins/registry.local/local/terracurl/1.0.0/linux_amd64/

      - name: Get dependencies
        run: go mod download

      - name: TF Acceptance Tests
        timeout-minutes: 10
        env:
          TF_ACC: "1"
        run: go test -v -cover ./internal/provider/

>>>>>>> main
