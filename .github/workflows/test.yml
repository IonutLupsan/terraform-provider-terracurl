#name: Tests
#on:
#  pull_request:
#    paths-ignore:
#      - 'README.md'
#  push:
#    paths-ignore:
#      - 'README.md'
#
#jobs:
#  build:
#    name: Build Provider
#    runs-on: ubuntu-latest
#    timeout-minutes: 5
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v3
#
#      - name: Set up Go
#        uses: actions/setup-go@v4
#        with:
#          go-version-file: 'go.mod'
#          cache: true
#
#      - name: Get dependencies
#        run: go mod download
#
#      - name: Build Provider
#        run: GOOS=linux GOARCH=amd64 go build -o terraform-provider-terracurl .
#
#      - name: Upload provider binary
#        uses: actions/upload-artifact@v4
#        with:
#          name: terraform-provider-terracurl
#          path: terraform-provider-terracurl
#
#  generate:
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-go@v4
#        with:
#          go-version-file: 'go.mod'
#          cache: true
#      - uses: hashicorp/setup-terraform@v2
#        with:
#          terraform_version: '1.9.5'
#
#      - name: Download built provider
#        uses: actions/download-artifact@v4
#        with:
#          name: terraform-provider-terracurl
#          path: .
#
#      - name: Make provider executable
#        run: chmod +x terraform-provider-terracurl
#
#      - name: Move Provider to Terraform Plugin Directories
#        run: |
#          mkdir -p ~/.terraform.d/plugins/local/local/terracurl/1.0.0/linux_amd64
#          mkdir -p .terraform/plugins/registry.local/local/terracurl/1.0.0/linux_amd64
#          cp terraform-provider-terracurl ~/.terraform.d/plugins/local/local/terracurl/1.0.0/linux_amd64/
#          cp terraform-provider-terracurl .terraform/plugins/registry.local/local/terracurl/1.0.0/linux_amd64/
#
#      - name: Debug Provider Execution
#        run: |
#          export TF_LOG=TRACE
#          terraform init -upgrade
#          terraform providers || echo "Error: Terraform could not attach to provider"
#
#      - name: Verify Terraform Plugin Directories
#        run: |
#          echo "Checking ~/.terraform.d/plugins/"
#          ls -la ~/.terraform.d/plugins/local/local/terracurl/1.0.0/linux_amd64/
#          echo "Checking .terraform/plugins/"
#          ls -la .terraform/plugins/registry.local/local/terracurl/1.0.0/linux_amd64/
#
#      - name: Create Terraform configuration file
#        run: |
#          cat <<EOF > main.tf
#          terraform {
#            required_providers {
#              terracurl = {
#                source  = "local/local/terracurl"
#                version = "1.0.0"
#              }
#            }
#          }
#          provider "terracurl" {}
#          EOF
#
#      - name: Initialize Terraform
#        run: terraform init -upgrade
#
#      - name: Verify Installed Providers
#        run: terraform providers
#
#      - name: Run Provider Schema Export Manually
#        run: |
#          export TF_LOG=DEBUG
#          terraform providers schema -json > schema.json || (echo "Error generating schema!"; cat schema.json; exit 1)
#
#      - name: Debug Schema Output
#        run: cat schema.json || echo "Schema output is empty"
#
#      - name: Run `go generate`
#        run: |
#          export TF_LOG=DEBUG
#          go generate ./...
#
#      - name: Check for Unexpected Changes
#        run: |
#          git diff --compact-summary --exit-code || \
#            (echo; echo "Unexpected difference in directories after code generation. Run 'go generate ./...' command and commit."; exit 1)
#
#  test:
#    name: Matrix Test
#    needs: build
#    runs-on: ubuntu-latest
#    timeout-minutes: 15
#    strategy:
#      fail-fast: false
#      matrix:
#        terraform:
#          - '0.12.*'
#          - '0.13.*'
#          - '0.14.*'
#          - '0.15.*'
#          - '1.0.*'
#          - '1.1.*'
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v3
#
#      - name: Set up Go
#        uses: actions/setup-go@v4
#        with:
#          go-version-file: 'go.mod'
#          cache: true
#
#      - uses: hashicorp/setup-terraform@v2
#        with:
#          terraform_version: ${{ matrix.terraform }}
#          terraform_wrapper: false
#
#      - name: Download built provider
#        uses: actions/download-artifact@v4
#        with:
#          name: terraform-provider-terracurl
#          path: .
#
#      - name: Make provider executable
#        run: chmod +x terraform-provider-terracurl
#
#      - name: Move Provider to Terraform Plugin Directories
#        run: |
#          mkdir -p ~/.terraform.d/plugins/local/local/terracurl/1.0.0/linux_amd64
#          mkdir -p .terraform/plugins/registry.local/local/terracurl/1.0.0/linux_amd64
#          cp terraform-provider-terracurl ~/.terraform.d/plugins/local/local/terracurl/1.0.0/linux_amd64/
#          cp terraform-provider-terracurl .terraform/plugins/registry.local/local/terracurl/1.0.0/linux_amd64/
#
#      - name: Verify Terraform Plugin Directories
#        run: |
#          echo "Checking ~/.terraform.d/plugins/"
#          ls -la ~/.terraform.d/plugins/local/local/terracurl/1.0.0/linux_amd64/
#          echo "Checking .terraform/plugins/"
#          ls -la .terraform/plugins/registry.local/local/terracurl/1.0.0/linux_amd64/
#
#      - name: Get dependencies
#        run: go mod download
#
#      - name: TF Acceptance Tests
#        timeout-minutes: 10
#        env:
#          TF_ACC: "1"
#        run: go test -v -cover ./internal/provider/

# This GitHub action runs your tests for each commit push and/or PR. Optionally
# you can turn it on using a cron schedule for regular testing.
#
name: Tests
on:
  pull_request:
    paths-ignore:
      - 'README.md'
  push:
    paths-ignore:
      - 'README.md'
  # For systems with an upstream API that could drift unexpectedly (like most SaaS systems, etc.),
  # we recommend testing at a regular interval not necessarily tied to code changes. This will
  # ensure you are alerted to something breaking due to an API change, even if the code did not
  # change.
  # schedule:
  #   - cron: '0 13 * * *'
jobs:
  # ensure the code builds...
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          cache: true
        id: go

      - name: Get dependencies
        run: |
          go mod download

      - name: Build
        run: |
          go build -v .

  generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          cache: true
      - run: go generate ./...
      - name: git diff
        run: |
          git diff --compact-summary --exit-code || \
            (echo; echo "Unexpected difference in directories after code generation. Run 'go generate ./...' command and commit."; exit 1)

  # run acceptance tests in a matrix with Terraform core versions
  test:
    name: Matrix Test
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        # list whatever Terraform versions here you would like to support
        terraform:
          - '0.12.*'
          - '0.13.*'
          - '0.14.*'
          - '0.15.*'
          - '1.0.*'
          - '1.1.*'
    steps:

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          cache: true
        id: go

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

      - name: Get dependencies
        run: |
          go mod download

      - name: TF acceptance tests
        timeout-minutes: 10
        env:
          TF_ACC: "1"

          # Set whatever additional acceptance test env vars here. You can
          # optionally use data from your repository secrets using the
          # following syntax:
          # SOME_VAR: ${{ secrets.SOME_VAR }}

        run: |
          go test -v -cover ./internal/provider/